#TEST
import requests, time, imaplib, email, telebot, os, ctypes, urllib.parse

from telebot import types

tgram = "insiderkeeps"
def primary():
    primarys = types.ReplyKeyboardMarkup(True, False, input_field_placeholder='Checking post')
    buttons = [
        types.KeyboardButton('/Read'),
        types.KeyboardButton('/FAQ'),
    ]
    for i in range(0, len(buttons), 3):
        primarys.row(*buttons[i:i+3])
    return primarys

# —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –µ–≥–æ
if not os.path.exists("config.txt"):
    with open("config.txt", "w") as file:
        file.write("IMAP Host = \n")
        file.write("IMAP User = \n")
        file.write("IMAP Pass = \n")
        file.write("Bot Token = \n")
        file.write("Chat ID = \n")

#—á–∏—Ç–∞–µ–º
with open("config.txt", "r") as file:
    lines = file.readlines()
    imap_host = lines[0].split("= ")[1].strip()
    imap_user = lines[1].split("= ")[1].strip()
    imap_pass = lines[2].split("= ")[1].strip()
    bot_token = lines[3].split("= ")[1].strip()
    chat_id = lines[4].split("= ")[1].strip()


#Token
bot = telebot.TeleBot(bot_token, threaded=True)

def Admin():  return ctypes.windll.shell32.IsUserAnAdmin() != 0 #Load scritps Admin

#Primary func
def read_mail():
    try:
        # –ü—Ä–æ–±—É–µ–º –∫–æ–Ω–Ω–µ–∫—Ç–∏—Ç—Å—è –∫ –ø–æ—á—Ç–µ
        mail = imaplib.IMAP4_SSL(imap_host)
        mail.login(imap_user, imap_pass)
        mail.select('inbox')

        # –ø–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–º—Å
        status, messages = mail.search(None, 'UNSEEN')

        #–ï—Å–ª–∏ –Ω–µ—Ç —Å–º—Å
        if not messages[0]:
            return '–ù–∞ –ø–æ—á—Ç–µ –ø–∏—Å–µ–º –±–æ–ª—å—à–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ üòï'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—á—Ç—ã.

        for message_id in messages[0].split():
            status, msg = mail.fetch(message_id, '(RFC822)')
            for response in msg:
                if isinstance(response, tuple):
                    msg = email.message_from_bytes(response[1])
                    email_text = None
                    if msg.is_multipart():
                        for part in msg.walk():
                            content_type = part.get_content_type()
                            if content_type == 'text/plain':
                                email_text = part.get_payload(decode=True).decode()
                                break
                    else:
                        email_text = msg.get_payload(decode=True).decode()
                    
                    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—á—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–∫–∏–ø–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if email_text is None:
                        continue

                    sender = email.utils.parseaddr(msg['From'].encode('utf-8').decode())[0]
                    timestamp = email.utils.parsedate_to_datetime(msg['Date']).strftime('%Y-%m-%d %H:%M:%S')
                    email_info = f"From: {sender}\nTime: {timestamp}\nText: {email_text}"
                    
                    # Trim the email text to a maximum of 1000 characters and URL encode it
                    trimmed_email_info = email_info[:1000]
                    encoded_email_info = urllib.parse.quote(trimmed_email_info)
                    url = f'https://api.telegram.org/bot{bot_token}/sendMessage?chat_id={chat_id}&text={encoded_email_info}'
                    response = requests.get(url)
                    if response.status_code != 200:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –°–ú–°: {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–æ—á—Ç—ã: {e}")
        message_error = f'{e}'
        bot.send_message(chat_id, message_error)
        ctypes.windll.user32.MessageBoxW(0, f'–£–ø—Å.. –æ—à–∏–±–∫–∞: {e}', u'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ', 0x10) 
        return
def main():
    
    if not bot_token or not chat_id:
        ctypes.windll.user32.MessageBoxW(0, f'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è (Bot Token –∏ Chat ID) –≤ —Ñ–∞–π–ª–µ config.txt', u'–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è', 0x10)
        return

    if not imap_host:
        ctypes.windll.user32.MessageBoxW(0, f'–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ (imap_host) —Å –∫–∞–∫–∏–º E-mail –º–Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å.\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∂–µ—à—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ config.txt. –†–µ–∫–æ–º–µ–Ω–¥—É—é –∫ –ø—Ä–æ—á—Ç–µ–Ω–∏—é FAQ', u'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', 0x00000030)

    PC = '–° –ê–î–ú–ò–ù –ü–†–ê–í–ê–ú–ò' if Admin() else '–ë–ï–ó –ê–î–ú–ò–ù –ü–†–ê–í'
    try:
        ctypes.windll.user32.MessageBoxW(0, f'–í–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ, —Å–∫—Ä–∏–ø—Ç  –±—ã–ª –∑–∞–ø—É—â–µ–Ω {PC}', u'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 0x00000040)
    except Exception as err:
        print('[-] ‚Ä∫ Retrying connect to api.telegram.org\n' + err)
    else:
        print('[+] ‚Ä∫ Connected to api.telegram.org\n')
    

    @bot.message_handler(commands=['Start','Read', 'FAQ'])
    def handle_commands(message):
        
        inf = {
        'FirstName -' : message.from_user.first_name,
        'Last - ' : message.from_user.last_name,
        }
        if str(message.chat.id) not in chat_id:
            bot.send_message(message.chat.id, f'üî¥ - *{inf["FirstName -"]} {inf["Last - "]}*, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–æ—á–Ω–æ - –ø–∏—à–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É - {tgram}', parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())
            return      

        if message.text == '/Start':    
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç. –ï—Å–ª–∏ —Ç—ã –≤–∏–¥–∏—à—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ —Ç–æ–∫–µ–Ω –∏ –∏ ID –≤–≤–µ–¥–µ–Ω–æ –≤–µ—Ä–Ω–æ \n\nDeveloper - {tgram} ', reply_markup=primary())
            
        if message.text == '/FAQ':
            faq_message = '''
    ‚ÑπÔ∏è –ö–∞–∫–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –æ–±–ª–∞–¥–∞–µ—Ç –±–æ—Ç?

        - `–ß–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ—á—Ç—ã( –±—ã–≤–∞–µ—Ç —Ç–∞–∫–æ–µ –ø–∏—Å—å–º–æ, —á—Ç–æ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ –∑–∞ –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ )`

        - `–ë–æ—Ç –≤ –≤–∞—à–∏—Ö —Ä—É–∫–∞—Ö, –∏–∑–º–µ–Ω—è–µ—Ç–µ, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–µ—Ç —Ç–æ–ª—å–∫–æ –í–´ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥ config.txt, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞`

    ‚ÑπÔ∏è –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã?

            -  `IMAP Host= –ö–ê–ö–û–ô –¢–ò–ü –ü–û–ß–¢–´`:

            ( `imap.gmail.com` \ `imap.mail.ru` ) ...
            
            - `IMAP User= –õ–æ–≥–∏–Ω –æ—Ç –ø–æ—á—Ç—ã`
            
            - `IMAP Pass= –ü–∞—Ä–æ–ª—å –æ—Ç –ø–æ—á—Ç—ã(–ù–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä–æ–ª—å) `
            ( –ú–û–ñ–ù–û –ü–û–õ–£–ß–ò–¢–¨ –ó–î–ï–°–¨ - https://myaccount.google.com/security )
            
            - `Bot Token= –¢–æ–∫–µ–Ω –º–æ–∂–Ω–æ –≤–∑—è—Ç—å —É –±–æ—Ç–∞` ( @BotFather )
             
            - `Chat ID= –ò–î –ú–û–ñ–ù–û –í–∑—è—Ç—å —É –±–æ—Ç–∞` ( @userinfobot ) '''

            bot.send_message(message.chat.id, faq_message, reply_markup=primary(), parse_mode="Markdown")
        elif message.text == '/Read':
            if imap_user == "":
                bot.send_message(message.chat.id, "‚ö†Ô∏è *–ü–æ–ª–µ —Å –∏–º—è –ø–æ—á—Ç—ã –ø—É—Å—Ç–æ–µ. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:*\n`IMAP User: –≤–∞—à–∞ –ø–æ—á—Ç–∞`", parse_mode="Markdown")
                return
            if imap_pass == "":
                bot.send_message(message.chat.id, "‚ö†Ô∏è *–ü–æ–ª–µ —Å –ø–∞—Ä–æ–ª–µ–º –ø—É—Å—Ç–æ–µ. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–∞–π–ª —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º:* \n`IMAP Pass: –≤–∞—à –ø–∞—Ä–æ–ª—å`", parse_mode="Markdown")
                return

            try:
                bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—è—é –ø–æ—á—Ç—É üòá', reply_markup=primary())
                read_mail()
                bot.send_message(message.chat.id, read_mail())
            except: pass

    while True:
        try:
            response = requests.get('https://www.google.com')
            if response.status_code == 200:
                bot.polling(none_stop=True, interval=1, timeout=123, skip_pending=True)
                print('Bot (ok)')
                break
        except Exception as err:
            print(f'Bot (error)\n {err}')
            
        time.sleep(30)

if __name__ == "__main__":
    main()